// В парке города Питсбурга есть чудесная аллея, состоящая из N посаженных в один ряд деревьев, каждое одного из K сортов.
// В связи с тем, что Питсбург принимает открытый чемпионат Байтландии по программированию, было решено построить огромную арену для проведения соревнований.
// Так, согласно этому плану вся аллея подлежала вырубке. Однако министерство деревьев и кустов воспротивилось этому решению, и потребовало оставить некоторые из деревьев в покое.
// Согласно новому плану строительства все деревья, которые не будут вырублены, должны образовывать один непрерывный отрезок, являющийся подотрезком исходного.
// Каждого из K видов деревьев требуется сохранить хотя бы по одному экземпляру. На вас возложена задача найти отрезок наименьшей длины, удовлетворяющий указанным ограничениям.

// Формат ввода
// В первой строке входного файла находятся два числа N и K (1 ≤ N, K ≤ 250000).
// Во второй строке входного файла следуют N чисел (разделенных пробелами), i-ое число второй строки задает цвет i-ого слева дерева в аллее.
// Гарантируется, что присутствует хотя бы одно дерево каждого цвета

// Формат вывода
// В выходной файл выведите два числа, координаты левого и правого концов отрезка минимальной длины, удовлетворяющего условию. Если оптимальных ответов несколько, выведите любой.

// Пример 1
// Ввод
// 5 3
// 1 2 1 3 2

// Вывод
// 2 4

// Пример 2
// Ввод
// 6 4
// 2 4 2 3 3 1

// Вывод
// 2 6

function beautyAboveAllElse(data) {
  const source = data
    .toString()
    .trim()
    .split('\n')
    .map((a) => a.split(' ').map(Number));

  const [[n, k], treesList] = source;
  let left = 0;
  let right = n - 1;
  const dict = {};

  for (let i = 0; i < n; i++) {
    if (!dict[treesList[i]]) {
      dict[treesList[i]] = 1;
    } else {
      dict[treesList[i]] += 1;
    }
  }

  while (dict[treesList[left]] !== 1 || dict[treesList[right]] !== 1) {
    if (dict[treesList[left]] > 1) {
      dict[treesList[left]]--;
      left += 1;
    }

    if (dict[treesList[right]] > 1) {
      dict[treesList[right]]--;
      right -= 1;
    }
  }
  return [left + 1, right + 1];
}

const fs = require('fs');
let fileContent = fs.readFileSync('input.txt', 'utf8');

const result = beautyAboveAllElse(fileContent);

fs.writeFileSync('output.txt', result.join(' '));
