// На Новом проспекте построили подряд 10 зданий. Каждое здание может быть либо жилым домом, либо магазином, либо офисным зданием.

// Но оказалось, что жителям некоторых домов на Новом проспекте слишком далеко приходится идти до ближайшего магазина.
// Для разработки плана развития общественного транспорта на Новом проспекте мэр города попросил вас выяснить,
// какое же наибольшее расстояние приходится преодолевать жителям Нового проспекта, чтобы дойти от своего дома до ближайшего магазина.

// Формат ввода
// Программа получает на вход десять чисел, разделенных пробелами.
// Каждое число задает тип здания на Новом проспекте: число 1 обозначает жилой дом, число 2 обозначает магазин, число 0 обозначает офисное здание.
// Гарантируется, что на Новом проспекте есть хотя бы один жилой дом и хотя бы один магазин.

// Формат вывода
// Выведите одно целое число: наибольшее расстояние от дома до ближайшего к нему магазина.
// Расстояние между двумя соседними домами считается равным 1 (то есть если два дома стоят рядом, то между ними расстояние 1,
// если между двумя домами есть еще один дом, то расстояние между ними равно 2 и т.д.)

// Пример
// Ввод
// 2 0 1 1 0 1 0 2 1 2

// Вывод
// 3

// Примечания
// В примере из условия дальше всего идти до ближайшего магазина жителям четвертого дома:
// ближайший к их дому магазин находится в первом доме, и им нужно пройти три дома до него.
//  Жителям других домов придется пройти меньшее расстояние до ближайшего магазина, поэтому ответ 3.

function findLargeDist(data) {
  const arr = data.toString().trim().split(/\s+/).map(Number);
  let dist = Infinity;
  const distancesLeft = [];
  const distancesRight = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === 0) {
      dist += 1;
    } else if (arr[i] === 1) {
      dist += 1;
      distancesLeft.push(dist);
    } else if (arr[i] === 2) {
      dist = 0;
    }
  }
  dist = Infinity;
  for (let i = arr.length - 1; i > -1; i--) {
    if (arr[i] === 0) {
      dist += 1;
    } else if (arr[i] === 1) {
      dist += 1;
      distancesRight.push(dist);
    } else if (arr[i] === 2) {
      dist = 0;
    }
  }

  const result = [];

  for (
    let i = 0, j = distancesLeft.length - 1;
    i < distancesLeft.length, j > -1;
    i++, j--
  ) {
    result.push(Math.min(distancesLeft[i], distancesRight[j]));
  }
  return Math.max(...result);
}

const fs = require('fs');
let fileContent = fs.readFileSync('input.txt', 'utf8');

const result = findLargeDist(fileContent);
fs.writeFileSync('output.txt', result + '');
