// Для освоения Марса требуется построить исследовательскую базу. База должна состоять из n одинаковых модулей, каждый из которых представляет собой прямоугольник.
// Каждый модуль представляет собой жилой отсек, который имеет форму прямоугольника размером a на b метров.
// Для повышения надежности модулей инженеры могут добавить вокруг каждого модуля слой дополнительной защиты.
// Толщина этого слоя должна составлять целое число метров, и все модули должны иметь одинаковую толщину дополнительной защиты.
// Модуль с защитой, толщина которой равна d метрам, будет иметь форму прямоугольника размером (a+2d)(b+2d) метров.
// Все модули должны быть расположены на заранее подготовленном прямоугольном поле размером wh метров.
// При этом они должны быть организованы в виде регулярной сетки: их стороны должны быть параллельны сторонам поля, и модули должны быть ориентированы одинаково.

// Требуется написать программу, которая по заданным количеству и размеру модулей,
// а также размеру поля для их размещения, определяет максимальную толщину слоя дополнительной защиты, который можно добавить к каждому модулю.

// Формат ввода
// Входной файл содержит пять разделенных пробелами целых чисел: n, a, b, w и h (1 ≤ n, a, b, w, h ≤ 1018).
// Гарантируется, что без дополнительной защиты все модули можно разместить в поселении описанным образом.

// Формат вывода
// Выходной файл должен содержать одно целое число: максимальную возможную толщину дополнительной защиты.
// Если дополнительную защиту установить не удастся, требуется вывести число 0.

// Пример 1
// Ввод
// 1 1 1 1 1

// Вывод
// 0

// Пример 2
// Ввод
// 1 1 1 3 3

// Вывод
// 1

// function findOptimalDepth(data) {
//   const [n, a, b, w, h] = data.toString().trim().split(' ').map(BigInt);
//   let l = 0n,
//     r = w / 2n;

//   while (l < r) {
//     let m = (l + r + 1n) / 2n;
//     if (checkSizeDefens(a, b, m, n, w, h) || checkSizeDefens(b, a, m, n, w, h)) {
//       l = m;
//     } else {
//       r = m - 1n;
//     }
//   }
//   return l;
// }

// const checkSizeDefens = (width, height, sizeDefends, amount, fieldWidth, fieldHeight) => {
//   const nWidth = fieldWidth / (width + 2n * sizeDefends);
//   const nHeight = fieldHeight / (height + 2n * sizeDefends);
//   return nWidth * nHeight >= amount;
// };

// const fs = require('fs');
// let fileContent = fs.readFileSync('input.txt', 'utf8');

// const result = findOptimalDepth(fileContent);

// fs.writeFileSync('output.txt', result + '');
